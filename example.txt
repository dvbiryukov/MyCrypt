Key: 
test2435!

Text:
Encryption and Decryption With Simple Crypt Using Python
APR 29TH, 2018 10:50 AM
Today I wanted to encrypt sensitive information to not expose passwords, hostnames etc. I wanted to have a way to encrypt my strings with a master password and stumbled upon Simple Crypt.

Simple Crypt
Why simple-crypt? Referenced from their docs:

Simple Crypt uses standard, well-known algorithms following the recommendations from this link.
The PyCrypto library provides the algorithm implementation, where AES256 cipher is used.
It includes a check (an HMAC with SHA256) to warn when ciphertext data are modified.
It tries to make things as secure as possible when poor quality passwords are used (PBKDF2 with SHA256, a 256 bit random salt, and 100,000 rounds).
Using a library, rather than writing your own code, means that we have less solutions to the same problem.


Result:
JTI0JTVDVyUxMEolMTUlMTdRWCUwQyUxM1AlMEQlNUMlMTl1JTVEJTA3JTEzQUElMTElMDhYJTVEJTEwZlFDJTBFQTJfJTBDRFVTJTE4JTI2RyUxOEIlNDBCZiUxNiUwQVZQQmNIJTE3UFZfMiUyNTFqJTExV1hjJTdCJTFDJTExJTBBJTA3V1lBJTA3USUwRSUwQyUwNiUxOCUyNHhrZiU1QiUwNlIlMUNDcSUxNyUxNVJfJTE3JTVEJTVEJTExTCUwQkElNURfJTA2JTEzTkNEJTExS1IlMDglMTIlMDhCJTA4QiU1QyUxNlElMEJTJTBFJTQwWSUwM0clMEMlMENWJTE3JTE2JTVDJTExJTBEV00lMTElNUQlMUMlMTFXQiUwMEFHUkNCT1glMTQlMDUlMTIlMUFBJTVDVkVMJTBCVCUwQ1dHQlYlMTElMDAlMTYlMTclMkIlMTNGJTAyVk1UJTVDRCUxNVclMTElMEQlMDBBViUxMFAlMTglNDAlMDclMThBQiUwRSUxNCU1Q1glNUIlMTdMJTExRiUxNCUwRkpFJTEwTEUlMEIlNURWJTEwJTE4TlhMJTBDQVklMTElMDglMDBER1VDJTE4RyUwNyUxMiUxMkElMEVGJTVEJTE2WSUwQlFBQSU0MCUxNyU1RSUwNyUwRiU1RFNCRkElMENWJTE5YlElMDklMTFUVEUlMjJFSiU0MEUlMTYlM0RsMiUwOCU1QiUxMVglNUMlMTYlN0IlMTdMJTExRiUzRTUlNUIlMUNDSyU1RSUwRkMlNUQlMDYlMTVaQ0ElMTQlMTUlMDclMTE3JTA0UVZCVFZUJTAzJTA1QVAlMTMlNUJUJTE2TCUwRFAlMDglNDAlMTQlMDYlNUMlMDYlMTAlMDIlM0RoJTYwWCUwRUhVVCUxOCclMTNBQSUxMUFCJTQwVUIlMThEJTEyJTAwJTBGUiUwMEYlNUQlMUElMTglMTJQJTBEJTVFJTE5JTA5JTVEJTBBJTE0ViUxNyUwM19WJTBDSlBFUCUwOSUxMiUxOFclMEElMEQlNUIlNUNHWFZQRiUxNSUwOVNBRiU1Q1VXJTA4WCUwNCU1Q1AlMDNHJTBDJTBDVkRCVUMlMENVJTE5RVAlMEQlMTIlMTglNUQlMEMlMEYlNUMlMUQlM0FlUFJGMSUxOHUlMTNNSUJXRVklMDhQRiUwM0ElMUNDSEUlMERFWCUwNyU1REolMTFMJTBDJTA0JTE4UCUwOSUwNlhBWUVQWkYlMDglMENGJTBEUVRTViUxMVQlMTUlNUIlNUIlMEMlMUZFJTE0UFIlMTBWJTExJTIyJTdEaiUwMyUwRFJBJTVCWCUxNSUwOVJBJTEwWEslMTclMTMlMTIlMDRSTyUzRXBCJTE4JTBDJTVCJTAyJTVFQSUwNlYlMTZDWSUxNyUwMSU1QlQlMDBTJTE5JTE5WSUwQUFwJTdDJTI0JTIyJTE3RFlFUCUxNzUpJTIwJTA0VCUwMiUxMCUxNkwlMEElMTUlMTZTRiUwQyUxMyUxMiUwQiU1RFlCUFglMTNQJTVDQ0wlMDElMTlMJTExJTAxJTAwQ1IlMTBQSlJGJTBDJTBFUiUwOFJQUyU1Q0slM0YoRiUxNCUxNkElMEMlMDZLJTE3JTE2JTVDJTExJTBFWVJUJTE4JTEwJTA5UV8lMDIlMTIlMTdSQyUxMUtSJTA1JTE0JTEzU0FVSiUxNkglMEFGJTEyJTVCViUwRVZFJTE0UFIlMEMlMTNBJTBDV0slMTFJJTExJTAwVFglMTElMTglMTdDUUJLJTQwJTA5JTEzJTA1RUFVS1MlMTglMTBGJTA0ViUxNEpjJyglN0NxUCUxM0YlMEFMUSUxMWslMkMlMjAlMEElMDRTTSUxN1IlMTAlMDMlMEQlMDFGJTAzJTA4QkFGWFglNUMlMEFYQUFVJTBFR0lDWVklMDYlMTMlMDBTJTA4JTE1JTAxJTA4VEFKJTVFJTEwJTBGUyU0MCUxOSUxRjJiJTE1JTA4JTBGUUFVJTE5WlElMDdHJTAwJTQwTU4lMTMlMTclMDJMXyUwN0ElMTElMTdQWF8lMTglMTMlMTNRRSUwQyUwRlAlMTNJJTVFTUVGJTBFJTE2WEFXVlIlNURJJTE1JTBDV1UlMEMlNDBFJTE3UFYlMTYlMTNGJTA2JTE4UVBOJTAxQVRUJTE2JTEyJTE3JTQwXyU1RE1DJTBGJTBFJTBGRUElNDBWJTE2TCUwRFBBQVUlMEZWRSUxM0pYJTAwX1QlMEUlMTY=


=============================

Key: 
test2435!

Text: 
Now that we have our encrypted string, lets decrypt it. First we will use the wrong password, so that you will see how the expected output should look when using a different password, than was used when it was encrypted:

Result:
jA0EAwMCN5Qwvu/4dXFgyemRtTuoWWtqpPIoG6N++bZUrOC8hQHdQGJ5okC0pxnTVOjvBnGxU7UK3ROjEhWFwlHcFtaMIItRF13WjYZbBfbFEJJ5ghdDCnMwAImPIYP7TM8J0lu/ENteSwiO9NqprFEg14XZ8OpbOIrbZZNdT2Y6d6Osr2f/Cd3NJaBY5Rrr1Bk7N7vO9fbtGbr0PvIKGTfS704s5EvG8Y6/+XbtrUkRNMh0LGdNLlI47qhk/la8Y+gRDBAfpJ5bIq6y28MyJ/Z8e3cd372LoBEog+Cdg9oVsQIg+jNJy26hjfsAtni2JdIqu1oYW235KN0VGf3jPItyTI6filcDorQ+0AnccAIZ6mNXC44WWhuiqp4pgyNdtuoeHKfTNWaoIuVWF6B5fynQvhIGyt9D8jl8JPspEhsbqU/wLWRKsZX5NBhnconF3fyCgS3zFzRfOB9efkFCkTmE2DU036UXxs2k/6XsRapDruFq7ZDQHgWSZoZMAq9qyMIMjvRwA5uw5sw2FIEYn9ToCkhxsKGw/kerR9NL5mQxuPQN3FICHfLIk3DrS/7a2cBBFpihP6yOMQwTnLcZ0tGQgizpZOpE/i3eiHUtcODlxRffJ0qN7ZJJCVHp4IyGnP8gjZh8fTBBHytbAZiMaTAjGdqIfRyjsoTWW0OkmnpSeK9fbVilbpQR+PIf79ebZ8CwefhJh4U2QEIeiET5NFvYmLCg5Vm6TqWlfavjlj5A4Eo7wbUxGie40tu7o7s6wp1rzgNTndVGrGq30mbdMhR1c2MMJVklzEHEfESkudzyXGqjWm+nEh0QWSpUdolMJNWTlA72p0posChpc9gsRYZp6KOVkJ+/UOs/4YgwKhX7xoNDVKeSCGBxRNTotd6v0MDihbMMD2l1fUUArGNaQDIqRki0+0XAiz8Zk1VHjboUyIKyEnuhMC9V3I+dMYG4V9IBTaheEFzx0/W9wqQHmFP1lg6TCU2cOlzQQWPB3FUqgTenouyIiqPlE9FRd8CN9CDcH5p6EMO9hEtHFIJ/EVvncd2n3rKxNV3ILK/dIqRr6msP+bZqaLZV6exLWNzxC6EhLdJj4uxCuK14g0k7KK93qNp2tT3dHMzKNU0iaPJPXRZ5zDssnwEAKdCFkKCv5YRxnD576nzTk/8KiM+zQvUkonaWSRH2k0tQ8+A9t874OX8=
